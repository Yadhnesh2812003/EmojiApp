{"ast":null,"code":"import Emojidata from './Emojidata';\nimport react, { useState } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Gamealgo(props) {\n  let arrAlgo = [{\n    arr: new Array(8)\n  }, {\n    arr: new Array(8)\n  }, {\n    arr: new Array(8)\n  }, {\n    arr: new Array(8)\n  }, {\n    arr: new Array(8)\n  }];\n\n  for (var i = 0; i < 5; i++) {\n    for (var j = 0; j < 8; j++) {\n      arrAlgo[i].arr[j] = Emojidata[Math.floor(Math.random() * 41)];\n    }\n  }\n\n  var Stack = new Array(40);\n  var searchEmg = -1;\n\n  if (props.startGame == true) {\n    console.log(\"Required Data : \" + Emojidata[props.selectedEmoji]);\n    console.log(\"Refn table\");\n\n    for (var i = 0; i < 5; i++) {\n      console.log(\"array No : \" + i);\n\n      for (var j = 0; j < 8; j++) {\n        console.log(arrAlgo[i].arr[j]);\n      }\n    }\n\n    let flag = -1;\n    let counter = 0;\n    var k;\n\n    while (counter <= 1) {\n      searchEmg = Math.floor(Math.random() * 5);\n\n      for (k = 0; k < 8; k++) {\n        if (arrAlgo[searchEmg].arr[k] == Emojidata[props.selectedEmoji]) {\n          flag = k;\n          break;\n        } //  console.log(\"Found at arr no \"+searchEmg+\" index no \"+j);   \n\n      }\n\n      if (flag >= 0) console.log(\"Data found at array at locn : \" + searchEmg + \" \" + flag);else console.log(\"not found\");\n      counter += 1;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_c = Gamealgo;\nexport default Gamealgo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Gamealgo\");","map":{"version":3,"sources":["D:/Microsoft VS Code/A React-Start/emoji-app/src/components/Gamealgo.js"],"names":["Emojidata","react","useState","Gamealgo","props","arrAlgo","arr","Array","i","j","Math","floor","random","Stack","searchEmg","startGame","console","log","selectedEmoji","flag","counter","k"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,IAAcC,QAAd,QAA6B,OAA7B;;;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EACA;AACA,MAAIC,OAAO,GAAC,CACR;AACIC,IAAAA,GAAG,EAAC,IAAIC,KAAJ,CAAU,CAAV;AADR,GADQ,EAIR;AACID,IAAAA,GAAG,EAAC,IAAIC,KAAJ,CAAU,CAAV;AADR,GAJQ,EAOR;AACID,IAAAA,GAAG,EAAC,IAAIC,KAAJ,CAAU,CAAV;AADR,GAPQ,EAUR;AACID,IAAAA,GAAG,EAAC,IAAIC,KAAJ,CAAU,CAAV;AADR,GAVQ,EAaR;AACID,IAAAA,GAAG,EAAC,IAAIC,KAAJ,CAAU,CAAV;AADR,GAbQ,CAAZ;;AAiBA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,CAAd,EAAgBA,CAAC,EAAjB,EACA;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,CAAd,EAAgBA,CAAC,EAAjB,EACA;AACGJ,MAAAA,OAAO,CAACG,CAAD,CAAP,CAAWF,GAAX,CAAeG,CAAf,IAAkBT,SAAS,CAACU,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAAD,CAA3B;AACF;AACA;;AACD,MAAIC,KAAK,GAAC,IAAIN,KAAJ,CAAU,EAAV,CAAV;AACA,MAAIO,SAAS,GAAC,CAAC,CAAf;;AACA,MAAGV,KAAK,CAACW,SAAN,IAAiB,IAApB,EACA;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAmBjB,SAAS,CAACI,KAAK,CAACc,aAAP,CAAxC;AACJF,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACI,SAAI,IAAIT,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,CAAd,EAAgBA,CAAC,EAAjB,EACA;AACIQ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAeT,CAA3B;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,CAAd,EAAgBA,CAAC,EAAjB,EACA;AACJO,QAAAA,OAAO,CAACC,GAAR,CAAYZ,OAAO,CAACG,CAAD,CAAP,CAAWF,GAAX,CAAeG,CAAf,CAAZ;AACK;AACJ;;AACD,QAAIU,IAAI,GAAC,CAAC,CAAV;AACA,QAAIC,OAAO,GAAC,CAAZ;AACA,QAAIC,CAAJ;;AACA,WAAMD,OAAO,IAAE,CAAf,EACA;AACAN,MAAAA,SAAS,GAACJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,CAAzB,CAAV;;AACC,WAAIS,CAAC,GAAC,CAAN,EAAQA,CAAC,GAAC,CAAV,EAAYA,CAAC,EAAb,EACA;AACC,YAAGhB,OAAO,CAACS,SAAD,CAAP,CAAmBR,GAAnB,CAAuBe,CAAvB,KAA2BrB,SAAS,CAACI,KAAK,CAACc,aAAP,CAAvC,EAA6D;AAC7DC,UAAAA,IAAI,GAACE,CAAL;AACA;AACC,SAJF,CAKD;;AACE;;AACF,UAAGF,IAAI,IAAE,CAAT,EACAH,OAAO,CAACC,GAAR,CAAY,mCAAiCH,SAAjC,GAA2C,GAA3C,GAA+CK,IAA3D,EADA,KAGAH,OAAO,CAACC,GAAR,CAAY,WAAZ;AAEAG,MAAAA,OAAO,IAAE,CAAT;AACC;AACJ;;AACG,sBACI,qCADJ;AAKH;;KAnEQjB,Q;AAoET,eAAeA,QAAf","sourcesContent":["import Emojidata from './Emojidata'\r\nimport react,{useState} from 'react'\r\nfunction Gamealgo(props)\r\n{\r\nlet arrAlgo=[\r\n    {\r\n        arr:new Array(8)\r\n    },\r\n    {\r\n        arr:new Array(8)\r\n    },\r\n    {\r\n        arr:new Array(8)\r\n    },\r\n    {\r\n        arr:new Array(8)\r\n    },\r\n    {\r\n        arr:new Array(8)\r\n    }\r\n]\r\nfor(var i=0;i<5;i++)\r\n{\r\nfor(var j=0;j<8;j++)\r\n{\r\n   arrAlgo[i].arr[j]=Emojidata[Math.floor(Math.random()*41)] \r\n}\r\n}\r\nvar Stack=new Array(40)\r\nvar searchEmg=-1\r\nif(props.startGame==true)\r\n{  \r\n    console.log(\"Required Data : \"+Emojidata[props.selectedEmoji]);\r\nconsole.log(\"Refn table\");\r\n    for(var i=0;i<5;i++)\r\n    {\r\n        console.log(\"array No : \"+(i));\r\n        for(var j=0;j<8;j++)\r\n        {\r\n    console.log(arrAlgo[i].arr[j]);\r\n        }\r\n    }\r\n    let flag=-1\r\n    let counter=0\r\n    var k\r\n    while(counter<=1)\r\n    {\r\n    searchEmg=Math.floor(Math.random()*5)\r\n     for(k=0;k<8;k++)\r\n     {\r\n      if(arrAlgo[searchEmg].arr[k]==Emojidata[props.selectedEmoji]){\r\n      flag=k\r\n      break;\r\n      }\r\n    //  console.log(\"Found at arr no \"+searchEmg+\" index no \"+j);   \r\n     }\r\n    if(flag>=0)\r\n    console.log(\"Data found at array at locn : \"+searchEmg+\" \"+flag); \r\n    else\r\n    console.log(\"not found\")\r\n    \r\n    counter+=1;\r\n    }\r\n}\r\n    return(\r\n        <>\r\n        \r\n        </>\r\n    )\r\n}\r\nexport default Gamealgo"]},"metadata":{},"sourceType":"module"}