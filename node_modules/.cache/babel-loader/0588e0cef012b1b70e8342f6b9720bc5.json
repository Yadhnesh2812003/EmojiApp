{"ast":null,"code":"import Emojidata from './Emojidata';\nimport react, { useState } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar flag = -1;\nvar searchEmg = -1;\nvar arrAlgo = [{\n  arr: new Array(8)\n}, {\n  arr: new Array(8)\n}, {\n  arr: new Array(8)\n}, {\n  arr: new Array(8)\n}, {\n  arr: new Array(8)\n}];\n\nfunction Gamealgo(props) {\n  let l = -1;\n\n  for (var i = 0; i < 5; i++) {\n    for (var j = 0; j < 8; j++) {\n      arrAlgo[i].arr[j] = Emojidata[++l];\n    }\n  }\n\n  if (props.startGame == true) {\n    console.log(\"Required Data : \" + Emojidata[props.selectedEmoji]);\n    console.log(\"Refn table\");\n\n    for (var i = 0; i < 5; i++) {\n      console.log(\"array No : \" + i);\n\n      for (var j = 0; j < 8; j++) {\n        console.log(arrAlgo[i].arr[j]);\n      }\n    }\n\n    let counter = 0;\n    var k;\n\n    while (counter <= 5) {\n      searchEmg = Math.floor(Math.random() * 5);\n\n      for (k = 0; k < 8; k++) {\n        if (arrAlgo[searchEmg].arr[k] == Emojidata[props.selectedEmoji]) {\n          flag = flag = arrAlgo[searchEmg].arr[flag];\n          break;\n        } //  console.log(\"Found at arr no \"+searchEmg+\" index no \"+j);   \n\n      }\n\n      if (flag >= 0) {\n        console.log(\"Data found at array at locn : \" + searchEmg + \" \" + flag);\n        break;\n      } else {\n        console.log(\"not found\");\n      }\n\n      counter += 1;\n    }\n  }\n\n  flag = arrAlgo[0].arr[3]; //flag=arrAlgo[0].arr[3];\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_c = Gamealgo;\nexport default Gamealgo;\nexport { flag };\n\nvar _c;\n\n$RefreshReg$(_c, \"Gamealgo\");","map":{"version":3,"sources":["D:/Microsoft VS Code/A React-Start/emoji-app/src/components/Gamealgo.js"],"names":["Emojidata","react","useState","flag","searchEmg","arrAlgo","arr","Array","Gamealgo","props","l","i","j","startGame","console","log","selectedEmoji","counter","k","Math","floor","random"],"mappings":"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","sourcesContent":["import Emojidata from './Emojidata'\r\nimport react,{useState} from 'react'\r\nvar  flag=-1\r\nvar searchEmg=-1\r\nvar arrAlgo=[\r\n    {\r\n        arr:new Array(8)\r\n    },\r\n    {\r\n        arr:new Array(8)\r\n    },\r\n    {\r\n        arr:new Array(8)\r\n    },\r\n    {\r\n        arr:new Array(8)\r\n    },\r\n    {\r\n        arr:new Array(8)\r\n    }\r\n]\r\nfunction Gamealgo(props)\r\n{\r\nlet l=-1;\r\nfor(var i=0;i<5;i++)\r\n{\r\nfor(var j=0;j<8;j++)\r\n{\r\n   arrAlgo[i].arr[j]=Emojidata[++l] \r\n}\r\n}\r\nif(props.startGame==true)\r\n{  \r\n    console.log(\"Required Data : \"+Emojidata[props.selectedEmoji]);\r\nconsole.log(\"Refn table\");\r\n    for(var i=0;i<5;i++)\r\n    {\r\n        console.log(\"array No : \"+(i));\r\n        for(var j=0;j<8;j++)\r\n        {\r\n    console.log(arrAlgo[i].arr[j]);\r\n        }\r\n    }\r\n    let counter=0\r\n    var k\r\n    while(counter<=5)\r\n    {\r\n    searchEmg=Math.floor(Math.random()*5)\r\n     for(k=0;k<8;k++)\r\n     {\r\n      if(arrAlgo[searchEmg].arr[k]==Emojidata[props.selectedEmoji]){\r\n      flag=flag=arrAlgo[searchEmg].arr[flag]\r\n      break;\r\n      }\r\n    //  console.log(\"Found at arr no \"+searchEmg+\" index no \"+j);   \r\n     }\r\n    if(flag>=0){\r\n    console.log(\"Data found at array at locn : \"+searchEmg+\" \"+flag); \r\n    break;\r\n    }\r\n    else{\r\n    console.log(\"not found\")\r\n    }\r\n    counter+=1;\r\n    }\r\n}\r\nflag=arrAlgo[0].arr[3]\r\n//flag=arrAlgo[0].arr[3];\r\nreturn(\r\n        <>\r\n        \r\n        </>\r\n    )\r\n}\r\nexport default Gamealgo\r\nexport {flag}"]},"metadata":{},"sourceType":"module"}